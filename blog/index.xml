<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Raelize</title>
    <link>https://raelize.com/blog/</link>
    <description>Recent content in Blogs on Raelize</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;copy;2020 Raelize B.V. &lt;br&gt; Powered by &lt;a href=#&gt;Hugo&lt;/a&gt; and [Themefisher](https://themefisher.com).</copyright>
    <lastBuildDate>Mon, 15 Feb 2021 14:00:00 +0200</lastBuildDate><atom:link href="https://raelize.com/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Qualcomm IPQ40xx: An Unexpected Cup of TEE</title>
      <link>https://raelize.com/blog/qualcomm-ipq40xx-an-unexpected-cup-of-tee/</link>
      <pubDate>Mon, 15 Feb 2021 14:00:00 +0200</pubDate>
      
      <guid>https://raelize.com/blog/qualcomm-ipq40xx-an-unexpected-cup-of-tee/</guid>
      <description>The Qualcomm IPQ40xx family of chips, which includes the IPQ4018, IPQ4019, IPQ4028 and IPQ4029, are popular System-on-Chip (SoC) solutions for consumer and enterprise networking products. Many devices like the ASUS RT-AC58U, Cisco Meraki MR33 and Aruba AP-365 use an IPQ40xx chip as the main System-on-Chip (SoC) in their design. The OpenWRT Project supported device database shows at least 34 products, manufactured between 2018 and 2020, built around a IPQ40xx chip. The total number of products is likely to be much larger as many devices, like the Netgear Orbi RB20, are not supported by OpenWrt and therefore not included in the database.</description>
    </item>
    
    <item>
      <title>Espressif ESP32: Bypassing Encrypted Secure Boot (CVE-2020-13629)</title>
      <link>https://raelize.com/blog/espressif-esp32-bypassing-encrypted-secure-boot-cve-2020-13629/</link>
      <pubDate>Tue, 22 Sep 2020 08:00:00 +0200</pubDate>
      
      <guid>https://raelize.com/blog/espressif-esp32-bypassing-encrypted-secure-boot-cve-2020-13629/</guid>
      <description>We arrived at the last post about our Fault Injection research on the ESP32. Please read our previous posts as it provides context to the results described in this post.
 Espressif ESP32: Bypassing Secure Boot using EMFI Espressif ESP32: Controlling PC during Secure Boot Espressif ESP32: Bypassing Flash Encryption (CVE-2020-15048)  During our Fault Injection research on the ESP32, we gradually took steps forward in order to identify the required vulnerabilities that allowed us to bypass Secure Boot and Flash Encryption with a single EM glitch.</description>
    </item>
    
    <item>
      <title>Espressif ESP32: Bypassing Flash Encryption (CVE-2020-15048)</title>
      <link>https://raelize.com/blog/espressif-systems-esp32-bypassing-flash-encryption/</link>
      <pubDate>Mon, 14 Sep 2020 09:00:00 +0200</pubDate>
      
      <guid>https://raelize.com/blog/espressif-systems-esp32-bypassing-flash-encryption/</guid>
      <description>In our previous post we described an attack where we load an arbitrary value indirectly into the PC register using EMFI. During that attack we achieved our initial goal where we wanted to last year&#39;s research, where we turn Data Transfers into Code Execution, into practice.
As we already pointed out, the Flash Encryption feature of the ESP32 chip, which Espressif advises to use, significantly increases the complexity for bypassing Secure Boot.</description>
    </item>
    
    <item>
      <title>Espressif ESP32: Controlling PC during Secure Boot</title>
      <link>https://raelize.com/blog/espressif-systems-esp32-controlling-pc-during-sb/</link>
      <pubDate>Tue, 08 Sep 2020 12:00:00 +0200</pubDate>
      
      <guid>https://raelize.com/blog/espressif-systems-esp32-controlling-pc-during-sb/</guid>
      <description>In our previous post we demonstrated that the ESP32 chip is vulnerable to EMFI. We used this to bypass the Secure Boot implementation of the ESP32. During this post we also shared already that our goal was to put our previously conducted research, where we turn Data Transfers into Code Execution, into practice.
When a target is undergoing a Fault Injection attack, it&#39;s extremely difficult to guarantee that the hardware operates as intended.</description>
    </item>
    
    <item>
      <title>Fault Injection Reference Model (FIRM)</title>
      <link>https://raelize.com/blog/raelize-fi-reference-model/</link>
      <pubDate>Wed, 26 Aug 2020 11:00:00 +0200</pubDate>
      
      <guid>https://raelize.com/blog/raelize-fi-reference-model/</guid>
      <description>In today&#39;s world, physical access to a device is considered a significant threat as devices often play a central role for the underlying business model. A multitude of assets, intellectual property (IP) and even the devices themselves have become sufficiently valuable to require adequate protection.
This gave rise to security features specifically designed to mitigate threats related to physical access. These type of security features, for example Secure Boot, are nowadays way more common than they used to be just a handful of years ago.</description>
    </item>
    
    <item>
      <title>Espressif ESP32: Bypassing Secure Boot using EMFI</title>
      <link>https://raelize.com/blog/espressif-systems-esp32-bypassing-sb-using-emfi/</link>
      <pubDate>Fri, 24 Jul 2020 20:40:00 +0200</pubDate>
      
      <guid>https://raelize.com/blog/espressif-systems-esp32-bypassing-sb-using-emfi/</guid>
      <description>Our research during the last few years definitely points out our interest in Fault Injection (FI) attacks. We produced numerous publications, which we presented at both academic and security conferences. Among other research, we showed that FI is an effective technique for for bypassing Secure Boot (2016, 2019 and 2019) and escalating privileges on Linux (2017, 2017 and 2017).
Like many of you, our curiosity is constantly sparked and therefore we cannot prevent ourselves from injecting glitches.</description>
    </item>
    
    <item>
      <title>Security Advisories: D-Link DSL-2640B</title>
      <link>https://raelize.com/blog/d-link-dsl-2640b-security-advisories/</link>
      <pubDate>Sat, 28 Mar 2020 11:00:00 +0100</pubDate>
      
      <guid>https://raelize.com/blog/d-link-dsl-2640b-security-advisories/</guid>
      <description>In a previous post we shared our considerations on the impact of vulnerabilities in Internet connected devices that are EoL. We used the vulnerabilities that we identified in the D-Link DSL-2640B DSL gateway as a use case to support our considerations. In this post we describe the technical details of these vulnerabilities.
Before we dive into the technical details, it&#39;s important to note that:
 all vulnerabilities are (at least) applicable to the D-Link DSL-2640B (HW revision B2, Firmware version: EU_4.</description>
    </item>
    
    <item>
      <title>Threat After Death: Security Impact of EoL Devices</title>
      <link>https://raelize.com/blog/security-impact-of-eol-devices/</link>
      <pubDate>Wed, 18 Mar 2020 20:30:00 +0200</pubDate>
      
      <guid>https://raelize.com/blog/security-impact-of-eol-devices/</guid>
      <description>We identified several vulnerabilities in the D-Link DSL-2640B DSL gateway which will likely not be fixed as the device is EoL (more details will come soon). A vulnerability identified in an EoL device typically has a guaranteed, infinite lifetime. Basically a NO-day. Although Shodan only reports only two active devices, we like to stress that the impact of these vulnerabilities should not be neglected.
The DNSChanger malware has been updated in 2018 to target the DSL-2640B.</description>
    </item>
    
  </channel>
</rss>
